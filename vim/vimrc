
" ==================================================================================================
" Vundle Initialization
" Avoid modifying this section unless you are very sure of what you are doing

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle
set rtp+=$HOME/.vim/bundle/Vundle.vim

" Initialize Package Specification
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" ==================================================================================================
" Utility
Plugin 'scrooloose/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'sjl/gundo.vim'
Plugin 'jeetsukumaran/vim-buffergator'
Plugin 'benmills/vimux'

" General Programming Support
Plugin 'w0rp/ale'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'

" Python Support
Plugin 'vim-python/python-syntax'
Plugin 'valloric/youcompleteme'
Plugin 'tmhedberg/simpylfold'
Plugin 'google/yapf', { 'rpt': 'plugins/vim' }

" Markdown / Latex / Support
Plugin 'tpope/vim-markdown'
Plugin 'lervag/vimtex'

" JSON Support 
Plugin 'elzr/vim-json'

" Git Related
Plugin 'tpope/vim-fugitive'

" Theme / Interface
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tomasr/molokai'
" ==================================================================================================

call vundle#end()                           " Required

" ==================================================================================================
" Begin VIMRC Settings
" ==================================================================================================

" General {
    set encoding=utf-8
    filetype plugin indent on               " Autodetect filetypes
    set clipboard=unnamed                   " Use the system clipboard in conjunction with yank et al.
    set virtualedit=onemore                 " Cursor beyond last character
    set history=1000
    set spell                               " Turn on spell check
    set hidden                              " Buffer switching without saving
    set iskeyword-=.
    set iskeyword-=#
    set iskeyword-=-

    " Restore cursor to file position previous editing session
    function! ResCur()
        if line("'\"") <= line("$")
            silent! normal! g`"
            return 1
        endif
    endfunction

    augroup resCur
        autocmd!
        autocmd BufWinEnter * call ResCur()
    augroup END

    " Initiate a StartUp sequence
    function! StartUp()
        if 0 == argc()
            NERDTree
        end
    endfunction
    autocmd VimEnter * call StartUp()

    set backup                  " Backups are nice ...
    set undofile                " So is persistent undo ...
    set undolevels=1000         " Maximum number of changes that can be undone
    set undoreload=10000        " Maximum number lines to save for undo on a buffer reload

    au FocusLost * :wa
    set undodir=$HOME/.vim/undo
    set backupdir=$HOME/.vim/backup
    set directory=$HOME/.vim/swap
" }
" --------------------------------------------------------------------------------------------


" VIM UI {
    " Molokai color scheme
    syntax on
    "let g:rehash256 = 1    
    colorscheme molokai

    set showmode                            " Show current mode
    set tabpagemax=15                       " Maximum number of tabs
    set cursorline                          " Highlight cursor line
    highlight clear SignColumn              " SignColumn should match background
    highlight clear LineNr                  " Current line number row will have same color in relative mode

    set ruler                               " Show ruler
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
    set showcmd

    set laststatus=2                        " Always show the statusline
    set statusline=%<%f\                    " Filename
    set statusline+=%w%h%m%r                " Options
    set statusline+=%{fugitive#statusline()}    " Git Hotness
    set statusline+=\ [%{&ff}/%Y]           " Filetype
    set statusline+=\ [%{getcwd()}]         " Current dir
    set statusline+=%=%-14.(%l,%c%V%)\ %p%% " Right aligned file nav info

    set backspace=indent,eol,start          " Backspace for dummies
    set linespace=0                         " No extra spaces between rows
    set number                              " Line numbers on
    set relativenumber                      " Relative to where you are
    set showmatch                           " Show matching brackets/parenthesis
    set incsearch                           " Find as you type search
    set hlsearch                            " Highlight search terms
    set winminheight=0                      " Windows can be 0 line high
    set ignorecase                          " Case insensitive search
    set smartcase                           " Case sensitive when uc present
    set gdefault                            " Replace globally
    set wildmenu                            " Show list instead of just completing
    set wildmode=list:longest,full          " Command <Tab> completion, list matches, then longest common part, then all.
    set scrolljump=5                        " Lines to scroll when cursor leaves screen
    set scrolloff=3                         " Minimum lines to keep above and below cursor
    set list
    set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
" }
" --------------------------------------------------------------------------------------------

" Formatting {

    set nowrap                      " Do not wrap long lines
    set textwidth=79
    set formatoptions=qrn1
    set colorcolumn=85
    set autoindent                  " Indent at the same level of the previous line
    set shiftwidth=4                " Use indents of 4 spaces
    set expandtab                   " Tabs are spaces, not tabs
    set tabstop=4                   " An indentation every four columns
    set softtabstop=4               " Let backspace delete indent
    set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
    set splitright                  " Puts new vsplit windows to the right of the current
    set splitbelow                  " Puts new split windows to the bottom of the current
    set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
    set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks

    " Remove trailing whitespaces and ^M chars
    autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql autocmd BufWritePre <buffer> call StripTrailingWhitespace()
    autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
    autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2

    autocmd BufNewFile,BufRead *.coffee set filetype=coffee

    " Workaround vim-commentary for Haskell
    autocmd FileType haskell setlocal commentstring=--\ %s
    " Workaround broken colour highlighting in Haskell
    autocmd FileType haskell,rust setlocal nospell
" }
" --------------------------------------------------------------------------------------------

" Key Remapping {
    let mapleader = ','             " Leader is now ,

    " Use semicolon to execute vim commands
    nnoremap ; :

    " Open a new split and switch over to it
    nnoremap <leader>w <C-w>v<C-w>l

    " Moving around tabs and windows
    nnoremap <leader>h <C-w>h
    nnoremap <leader>j <C-w>j
    nnoremap <leader>k <C-w>k
    nnoremap <leader>l <C-w>l

    " Handle easier switching and moving
    nnoremap / /\v
    vnoremap / /\v

    " Clear a search
    nnoremap <leader><space> :noh<cr>
    " Yank from the cursor to the end of the line, to be consistent with C and D.
    nnoremap Y y$

    " Move around brackets
    nnoremap <tab> %
    vnoremap <tab> %

    " Visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " Navigating home and end of the line
    map <C-j> <PageDown>
    map <C-k> <PageUp>
    map <C-h> <HOME>
    map <C-l> <END>

    " Navigate the buffers
    map <C-o> :buffers<CR>:buffer<SPACE>

    " Disable arrow keys to help learn navigation
    nnoremap <up> <nop>
    nnoremap <down> <nop>
    nnoremap <left> <nop>
    nnoremap <right> <nop>
    inoremap <up> <nop>
    inoremap <down> <nop>
    inoremap <left> <nop>
    inoremap <right> <nop>
    nnoremap j gj
    nnoremap k gk
" }
" --------------------------------------------------------------------------------------------

" Plugins {
    " NERDTree
    nmap <leader>t :NERDTreeFocus<cr>
    let g:nerdtree_tabs_open_on_gui_startup=1

    " CTRL-P
    " Setup some default ignores
    let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
      \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
    \}
    " Use the nearest .git directory as the cwd
    " This makes a lot of sense if you are working on a project that is in version
    " control. It also supports works with .svn, .hg, .bzr.
    let g:ctrlp_working_path_mode = 'r'
    " Use a leader instead of the actual named binding
    nmap <leader>p :CtrlP<cr>
    " Easy bindings for its various modes
    nmap <leader>pb :CtrlPBuffer<cr>
    nmap <leader>pm :CtrlPMixed<cr>
    nmap <leader>pp :CtrlPMRU<cr>

    " Buffergator
    " Use the right side of the screen
    let g:buffergator_viewport_split_policy = 'R'
    " I want my own keymappings...
    let g:buffergator_suppress_keymaps = 1
    " Looper buffers
    "let g:buffergator_mru_cycle_loop = 1
    " Go to the previous buffer open
    nmap <leader>hh :BuffergatorMruCyclePrev<cr>
    " Go to the next buffer open
    nmap <leader>ll :BuffergatorMruCycleNext<cr>
    " View the entire list of buffers open
    nmap <leader>b :BuffergatorOpen<cr>
    " Shared bindings from Solution #1 from earlier
    nmap <leader>bb :enew<cr>
    nmap <leader>bq :bp <BAR> bd #<cr>

    " Gundo
    nnoremap <F5> :GundoToggle<CR>
    let g:gundo_width = 60
    let g:gundo_preview_height = 40
    let g:gundo_right = 1

    " ALE
    " NERDcommenter
    " SURROUND

    " Python Syntax
    let g:python_highlight_all = 1

    " YouCompleteMe

    " SimpylFold
    let g:SimpylFold_docstring_preview=1

    " YAPF
    map <leader>Y :call yapf#YAPF()<cr>

    " Markdown
    " Set options related to text wrapping
    au BufNewFile,BufReadPost *.{md,mdown,mkd,mkdn,markdown,mdwn} set filetype=markdown
    au BufNewFile,BufReadPost,BufWrite *.{md,mdown,mkd,mkdn,markdown,mdwn} syntax match Comment /\%^---\_.\{-}---$/
    au FileType markdown setlocal wrap             " Turn on line wrapping for Markdown
    au FileType markdown setlocal spell            " Spellchecking for Markdown
    au FileType markdown setlocal linebreak        " Avoid wrap breaking words
    au FileType markdown setlocal nolist           " Make sure linebreak work as expected
    au FileType markdown setlocal showbreak=↳\     " Know where we're
    au FileType markdown setlocal textwidth=0      " Remove text width limit
    au FileType markdown setlocal colorcolumn=0    " Remove the right columnbar

     " Syntac highlighting
    let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
    let g:markdown_syntax_conceal = 0
    let g:markdown_minlines = 100

    " Latex

    " JSON
    " Git

    " Vim-Airline Configuration
    let g:airline_powerline_fonts = 1 
    let g:airline_theme='molokai'
" }
" --------------------------------------------------------------------------------------------
